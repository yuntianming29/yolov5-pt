# YOLOv5 🚀 by Ultralytics, GPL-3.0 license

# Parameters
nc: 80  # number of classes, 数据集上的类别数

# 以下两个参数为缩放因子, 通过这两个参数就可以实现不同复杂度的模型设计，不同的模型结构仅仅是这两个因子不同  n<s<m<l
depth_multiple: 0.33  # model depth multiple, 控制网络深度(即控制 BottleneckCSP 的数目)￥深度就是多少个层，下面的number乘这个因子为实际该层的深度￥
width_multiple: 0.50  # layer channel multiple, 控制网络宽度, 控制 Conv 通道个数(卷积核数量)
# depth_multiple 表示 BottleneckCSP 模块层的缩放因子,将所有的 BottleneckCSP 模块的 Bottleneck 乘上该参数得到最终个数。控制子模块数量=int(number*depth)
# width_multiple 表示卷积通道的缩放因子,就是将配置里面的 backbone 和 head 部分有关 Conv 通道的设置，全部乘以该系数。控制卷积核的数量=int(number*width)

#提前预定义好的矩形框，来进行解码
anchors:
  - [10,13, 16,30, 33,23]  # P3/8底层  3个anchors，第一个是10*13大小的...anchor比较小，预测小目标
  - [30,61, 62,45, 59,119]  # P4/16中层
  - [116,90, 156,198, 373,326]  # P5/32高层(三个降采样倍率)

# YOLOv5 backbone
backbone:
  # [from, number, module, args] , -1表示从上一层过来的 ，不同的层结构（模型）定义在common.py里面，传递的参数是构造函数里面的参数
  [[-1, 1, Focus, [64, 3]],  # 0-P1/2   p表示金字塔的第几层，/2为缩小2倍数(变为原图的1/2)，即下采样倍率
   [-1, 1, Conv, [128, 3, 2]],  # 1-P2/4  这里128乘以width_multiple通道因子得到实际的输出通道数
   [-1, 3, C3, [128]],
   [-1, 1, Conv, [256, 3, 2]],  # 3-P3/8
   [-1, 9, C3, [256]],          #这里C3深度是9，但是实际不是，有深度-倍数depth_multiple，这里实际上只有三层（0.33*9）=3
   [-1, 1, Conv, [512, 3, 2]],  # 5-P4/16
   [-1, 9, C3, [512]],
   [-1, 1, Conv, [1024, 3, 2]],  # 7-P5/32    
   [-1, 1, SPP, [1024, [5, 9, 13]]],
   [-1, 3, C3, [1024, False]],  # 9
  ]

# YOLOv5 head
head:
  [[-1, 1, Conv, [512, 1, 1]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [[-1, 6], 1, Concat, [1]],  # cat backbone P4  第十二层的输入是第十一层(-1，上一层)和第六层过来的
   [-1, 3, C3, [512, False]],  # 13   

   [-1, 1, Conv, [256, 1, 1]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [[-1, 4], 1, Concat, [1]],  # cat backbone P3
   [-1, 3, C3, [256, False]],  # 17 (P3/8-small)  底层更适合测小目标，高层更适合测大目标，拼接就是不同层的特征进行融合

   [-1, 1, Conv, [256, 3, 2]],
   [[-1, 14], 1, Concat, [1]],  # cat head P4
   [-1, 3, C3, [512, False]],  # 20 (P4/16-medium)

   [-1, 1, Conv, [512, 3, 2]],
   [[-1, 10], 1, Concat, [1]],  # cat head P5
   [-1, 3, C3, [1024, False]],  # 23 (P5/32-large)

   [[17, 20, 23], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)
  ]
